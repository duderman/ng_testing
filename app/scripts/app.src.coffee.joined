'use strict'

# Returns the ISO week of the date.
Date.prototype.getWeek = ->
  date = new Date(this.getTime());
  date.setHours(0, 0, 0, 0);
  # Thursday in current week decides the year.
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
  # January 4 is always in week 1.
  week1 = new Date(date.getFullYear(), 0, 4);
  # Adjust to Thursday in week 1 and count number of weeks from date to week1.
  1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 \
    - 3 + (week1.getDay() + 6) % 7) / 7);

angular.module 'ngTestingApp', ['ngRoute', 'ngResource', 'ngAnimate']

angular.module 'ngTestingApp'
  .animation '.panel-body', ->
    DURATION = 300
    DISTANCE = 50
    animateUp = (element, className, done) ->
      direction = switch className
        when 'up' then 1
        when 'down' then -1
      return if not direction?
      element.stop()
      element.css { top: 0, opacity: 1,  }
      dublicateElment = jQuery("<div>")
        .addClass(element.attr('class'))
        .css {
          position: 'absolute',
          top: element.offset().top,
          left: element.offset().left,
          opacity: 1,
          width: element.outerWidth(),
          'z-index': 100,
          'text-align': 'center'
        }
        .html(element.text())
        .appendTo jQuery('body')
      element.css { top: DISTANCE*direction, opacity: 0 }
      dublicateElment.animate { top: dublicateElment.position().top-(DISTANCE*direction), opacity: 0 }, DURATION, ->
        dublicateElment.remove()
      element.animate { top: 0, opacity: 1 }, DURATION, done()
      return (cancel) ->
        element.stop() if cancel
    {
      addClass: animateUp
    }

angular.module 'ngTestingApp'
  .config ['$routeProvider', ($routeProvider) ->
    $routeProvider
      .when '/', {
        templateUrl: 'views/main.html',
        controller: 'MainCtrl'
      }
      .when '/about', {
        templateUrl: 'views/about.html'
      }
      .otherwise {
        redirectTo: '/'
      }
    ]

angular.module 'ngTestingApp'
  .controller 'MainCtrl', ['$scope', 'Sections', 'ControlTypes', '$timeout', ($scope, Sections, ControlTypes, $timeout) ->
      $scope.sections = Sections.getAll()
      $scope.sections.$promise.then ->
        $scope.currentSection = $scope.sections[0]
      $scope.isHasValidationError = (errorObject) ->
        return e for own k,e of errorObject when e
        false
      $scope.getControlTypeUrl = (type) ->
        ControlTypes.getByType(type)

      changeCurrentSection = (direction) ->
        $scope.panelBodyAction = direction
        $timeout ->
          $scope.panelBodyAction = ''
        , 300
        Sections.changeValue $scope.currentSection, direction
      $scope.incrementCurrentSection = ->
        changeCurrentSection 'up'
      $scope.decrementCurrentSection = ->
        changeCurrentSection 'down'
      $scope
    ]


angular.module('ngTestingApp')
  .directive 'dateInput', ['dateFilter', (dateFilter) ->
    {
      require: 'ngModel'
      template: '<input type="date"></input>'
      replace: true
      link: (scope, elm, attrs, ngModelCtrl) ->
          ngModelCtrl.$formatters.unshift (modelValue) ->
            dateFilter(modelValue, 'yyyy-MM-dd');

          ngModelCtrl.$parsers.unshift (viewValue) ->
            new Date(viewValue);
    }
  ]

angular.module('ngTestingApp')
  .factory 'ControlTypes', ->
    types = ['number','select','date','panel']

    {
      getAll: -> types
      getByType: (type) ->
        "views/controls/#{if type in types then type else 'number'}.html"
    }

angular.module 'ngTestingApp'
  .factory 'Sections', ['$resource', ($resource) ->
    sections = $resource('data/sections.json').query ->
      _today = new Date()
      sections[0].value = _today.getFullYear()
      sections[1].value = sections[1].availibleValues[Math.ceil((_today.getMonth()+1)/3)-1]
      sections[2].value = sections[2].availibleValues[_today.getMonth()]
      sections[3].value = _today.getWeek()
      sections[4].value = _today
      if sections[4].range?
        sections[4].range =
          min: new Date(sections[4].range.min),
          max: new Date(sections[4].range.max)
    {
      getAll: -> sections
      getById: (id) -> (s for s in sections when s.id is id)
      changeValue: (value, direction) ->
        switch (value.type || 'number')
          when 'number'
            newValue = value.value + (if direction is 'down' then -1 else 1)
          when 'date'
            newValue = new Date(value.value.getTime() + \
                (24 * 60 * 60 * 1000)*(if direction is 'down' then -1 else 1));
          when 'select'
            newValue = value.availibleValues[value.availibleValues.indexOf(value.value) + \
              (if direction is 'down' then -1 else 1)]
            newValue = value.value if not newValue?

        value.value = newValue if not value.range? or (value.range? and value.range.min <= newValue <= value.range.max)
    }
  ]
